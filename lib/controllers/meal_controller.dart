// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:meal_calculator/controllers/db_controller.dart';
import 'package:meal_calculator/models/meal_model.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:share_plus/share_plus.dart';

class MealController extends GetxController {
  final nameController = TextEditingController();
  final mealController = TextEditingController();
  final paidController = TextEditingController();

  final RxList<Member> members = <Member>[].obs;
  final RxBool isCalculating = false.obs;

  InterstitialAd? _interstitialAd;

  // @override
  // void onInit() {
  //   super.onInit();
  //   // _loadInterstitialAd();
  // }

  @override
  void onClose() {
    _interstitialAd?.dispose();
    nameController.dispose();
    mealController.dispose();
    paidController.dispose();
    super.onClose();
  }

  void addMember() {
    final name = nameController.text.trim();
    final meals = int.tryParse(mealController.text.trim()) ?? 0;
    final paid = int.tryParse(paidController.text.trim()) ?? 0;

    if (name.isNotEmpty && meals > 0 && paid > 0) {
      members.add(Member(name: name, meals: meals, paid: paid));
      nameController.clear();
      mealController.clear();
      paidController.clear();
    } else {
      Get.snackbar(
        'Invalid Input',
        'Please fill all fields correctly',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.redAccent,
        colorText: Colors.white,
        borderRadius: 10,
        margin: const EdgeInsets.all(16),
      );
    }
  }

  void removeMember(int index) {
    members.removeAt(index);
  }

  void clearMembers() {
    members.clear();
    // Clear text controllers
    nameController.clear();
    mealController.clear();
    paidController.clear();

    // Use a delayed unfocus to ensure it works after navigation
    Future.delayed(const Duration(milliseconds: 100), () {
      Get.focusScope?.unfocus();
    });
  }

  int getTotalMeals() {
    return members.fold(0, (sum, member) => sum + member.meals);
  }

  int getTotalPaid() {
    return members.fold(0, (sum, member) => sum + member.paid);
  }

  double getTotalMealRate() {
    final totalMeals = getTotalMeals();
    return totalMeals > 0 ? getTotalPaid() / totalMeals : 0.0;
  }

  List<Map<String, dynamic>> getMembersWithRates() {
    List<Map<String, dynamic>> membersWithRates = [];
    final mealRate = getTotalMealRate();

    for (var member in members) {
      double shouldPay = member.meals * mealRate;
      double balance = member.paid - shouldPay;

      membersWithRates.add({
        'name': member.name,
        'meals': member.meals,
        'paid': member.paid,
        'balance': balance
      });
    }

    return membersWithRates;
  }

  void shareResults() {
    final result = getMembersWithRates();
    final totalPaid = getTotalPaid();
    final totalMeals = getTotalMeals();
    final mealRate = getTotalMealRate();

    // Create formatted text for sharing
    StringBuffer shareText = StringBuffer();
    shareText.writeln('üçΩÔ∏è Meal Calculation Results');
    shareText.writeln('=' * 30);
    shareText.writeln();

    // Summary section
    shareText.writeln('üìä SUMMARY:');
    shareText.writeln('üí∞ Total Cost: ‡ß≥$totalPaid');
    shareText.writeln('üçΩÔ∏è Total Meals: $totalMeals');
    shareText.writeln('üìà Meal Rate: ‡ß≥${mealRate.toStringAsFixed(2)}');
    shareText.writeln();

    // Individual balances section
    shareText.writeln('üë• INDIVIDUAL BALANCES:');
    shareText.writeln('-' * 25);

    for (var member in result) {
      final balance = member['balance'];
      final isPositive = balance >= 0;
      final name = member['name'];
      final meals = member['meals'];
      final paid = member['paid'];

      shareText.writeln();
      shareText.writeln('üë§ $name');
      shareText.writeln('   Meals: $meals | Paid: ‡ß≥$paid');

      if (isPositive) {
        shareText
            .writeln('   ‚úÖ Will receive: ‡ß≥${balance.abs().toStringAsFixed(2)}');
      } else {
        shareText
            .writeln('   ‚ùå Needs to pay: ‡ß≥${balance.abs().toStringAsFixed(2)}');
      }
    }

    shareText.writeln();
    shareText.writeln('Generated by Meal Calculator App üì±');

    // Share the formatted text
    Share.share(
      shareText.toString(),
      subject:
          'Meal Calculation Results - ${DateTime.now().toString().split(' ')[0]}',
    );
  }

  Future<bool> saveMealHistory() async {
    try {
      isCalculating.value = true;

      final totalPaid = getTotalPaid();
      final totalMeals = getTotalMeals();
      final mealRate = getTotalMealRate();
      final membersWithRates = getMembersWithRates();

      final DbController dbController = Get.find<DbController>();
      final historyId = await dbController.insertMealHistory(
        totalPaid: totalPaid,
        totalMeals: totalMeals,
        mealRate: mealRate,
      );

      if (historyId > 0) {
        for (int i = 0; i < members.length; i++) {
          final member = members[i];
          final balance = membersWithRates[i]['balance'];

          await dbController.insertMember(
            historyId: historyId,
            name: member.name,
            meals: member.meals,
            paid: member.paid,
            balance: balance,
          );
        }

        await dbController.loadMealHistories();
        // showInterstitialAd();
        return true;
      }

      return false;
    } catch (e) {
      print('Error saving meal history: $e');
      return false;
    } finally {
      isCalculating.value = false;
    }
  }

  Future<bool> saveHistoryWithFeedback() async {
    final success = await saveMealHistory();
    if (success) {
      Get.snackbar(
        'Success',
        'Meal calculation saved to history',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.green,
        colorText: Colors.white,
        borderRadius: 10,
        margin: const EdgeInsets.all(16),
      );
    } else {
      Get.snackbar(
        'Error',
        'Failed to save meal calculation',
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
        borderRadius: 10,
        margin: const EdgeInsets.all(16),
      );
    }
    return success;
  }
}
